#!/bin/bash

#################################################################
#  Define your variables here:
#################################################################
FILESTOKEEP=168
BACKUP_DIR=/home/rundeck/stagelogs
AWS_BACKUP=s3://pnlp-prod-backup-confidential/Stage/Stage-MySQL-Backup/
MYSQL_USER=pharmauatadmin
MYSQL_PWD='cHW7iCcgu9MkZ19W'
DATE=$(date +"%Y-%m-%d")
MYSQL_HOST=pnlp-uat-rds-confidential.celvmmljjdtg.us-west-2.rds.amazonaws.com
databases=stage_pharma
ENVIRONMENT="Stage"
KIND="MySQL"
ALERT_NAME="${RD_JOB_NAME:-Daily MySQL & Elasticsearch Backup}"
RESOURCE_NAME="pnlp-uat-rds-confidential"

# The Slack webhook URL is injected by Rundeck from Key Storage (job option or env var)
SLACK_WEBHOOK_URL="${SLACK_WEBHOOK_URL:?Error: SLACK_WEBHOOK_URL is not set}"

start_time=$(date +%s)

#################################################################
#  Make sure output directory exists.
#################################################################

if [ ! -d "$BACKUP_DIR" ]; then
    mkdir -p "$BACKUP_DIR"
fi

#################################################################
#  Create backup
#################################################################
for db in ${databases}; do
    mysqldump --port=3306 --host=$MYSQL_HOST --user=$MYSQL_USER -p$MYSQL_PWD --no-create-db --routines "$db" | gzip > "$BACKUP_DIR/$db@$DATE.sql.gz"
    BACKUP_STATUS=$?
done

#################################################################
# Copy backup to AWS
#################################################################
for db in ${databases}; do
    aws s3 cp "$BACKUP_DIR/$db@$DATE.sql.gz" "$AWS_BACKUP"
    S3_STATUS=$?
done

#################################################################
# Cleanup old backups
#################################################################
find "$BACKUP_DIR/" -type f -ctime +7 -name '*.sql.gz' -execdir rm -- {} \;

end_time=$(date +%s)
duration=$((end_time - start_time))
duration_formatted=$(printf '%d minutes %d seconds' $((duration/60)) $((duration%60)))

backup_file="$BACKUP_DIR/$db@$DATE.sql.gz"
backup_size=$(du -h "$backup_file" | cut -f1)

timestamp=$(date -u '+%Y-%m-%d %H:%M UTC')

# Status based on exit codes
if [ $BACKUP_STATUS -eq 0 ] && [ $S3_STATUS -eq 0 ]; then
    STATUS=":white_check_mark: Success"
else
    STATUS=":x: Failure"
fi

# Use Rundeck environment variable or set a fallback
: "${RD_JOB_URL:=http://rundeck.example.com/job/YOUR_JOB_ID}"

# Print Notification in Required Format
echo ""
echo "------------------------------------------------------------"
echo "Alert Name: $ALERT_NAME"
echo "Kind: $KIND"
echo "Resource Name: $RESOURCE_NAME"
echo "Environment: $ENVIRONMENT"
echo "Execution Time: $timestamp"
echo "Status: $STATUS"
echo "Duration: $duration_formatted"
echo "Size: $backup_size"
echo "S3 Backup URL: ${AWS_BACKUP}${db}@${DATE}.sql.gz"
echo "RunDeck Job URL: Click here => $RD_JOB_URL"
echo "------------------------------------------------------------"

#################################################################
# Slack Notification with clickable Rundeck URL
#################################################################
SLACK_MESSAGE=$(cat <<EOF
*${ALERT_NAME}*
*Kind:* $KIND
*Resource:* $RESOURCE_NAME
*Environment:* $ENVIRONMENT
*Execution Time:* $timestamp
*Status:* $STATUS
*Duration:* $duration_formatted
*Size:* $backup_size
*S3 Backup:* ${AWS_BACKUP}${db}@${DATE}.sql.gz
*RunDeck URL:* <$RD_JOB_URL|Click here>
EOF
)

curl -X POST -H 'Content-type: application/json' --data "{
    \"text\": \"$SLACK_MESSAGE\"
}" "$SLACK_WEBHOOK_URL"
